generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  idx        Int      @id @default(autoincrement())
  id         String   @unique
  password   String
  nickname   String   @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post    Post[]
  comment Comment[]
}

model Post {
  idx        Int      @id @default(autoincrement())
  user       User?    @relation(fields: [userIdx], references: [idx], onDelete: Cascade)
  category   String
  title      String
  nickname   String?
  ip         String?
  password   String?
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userIdx Int?
  comment Comment[]
}

model Comment {
  idx        Int      @id @default(autoincrement())
  content    String
  images     String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  nickname   String?
  ip         String?
  password   String?

  user      User?     @relation(fields: [userIdx], references: [idx], onDelete: Cascade)
  userIdx   Int?
  post      Post      @relation(fields: [postIdx], references: [idx], onDelete: Cascade)
  postIdx   Int
  parent    Comment?  @relation("CommentToComment", fields: [parentIdx], references: [idx])
  parentIdx Int?
  replies   Comment[] @relation("CommentToComment")
}

model Subscription {
  id         Int      @id @default(autoincrement())
  endpoint   String
  type       String
  p256dh     String
  auth       String
  postId     Int?
  commentId  Int?
  created_at DateTime @default(now())
  latitude   Float?
  longitude  Float?

  @@unique([endpoint, type, postId, commentId])
}
